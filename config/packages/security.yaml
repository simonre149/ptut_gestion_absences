security:
  encoders:
    App\Entity\User:
      algorithm: auto

  role_hierarchy:
    ROLE_USER:              ROLE_USER
    ROLE_ADMIN:             ROLE_ADMIN
    ROLE_SUPER_ADMIN:       ROLE_SUPER_ADMIN

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    in_database:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      anonymous: true
      provider: in_database
      form_login:
        login_path: security_login
        check_path: security_login
      logout:
        path: security_logout
        target: security_login
    login:
      pattern: logapi/login
      stateless: true
      anonymous: true
      json_login:
        check_path: /logapi/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
    api:
      pattern: ^/logapi
      stateless: true
      guard:
        authenticator:
          - lexik_jwt_authentication.jwt_token_authenticator

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
  - { path: /ajouter-utilisateur, roles: ROLE_SUPER_ADMIN }
  - { path: /ajouter-cours, roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN] }
  - { path: /modifier-cours, roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN] }